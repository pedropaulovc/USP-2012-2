# MAC0448 - 2012 - PROGRAMAÇÃO PARA REDES DE COMPUTADORES
# EP4: Protocolos de Roteamento Multicast

## Autor
Pedro Paulo Vezzá Campos - 7538743


## Execução
O programa funciona conforme a especificação passada no enunciado do EP. Aceita
um parâmetro de execução:

python ep4-pedro.py topologia-rede.txt metodo

ou

$ ./ep3-pedro.py topologia-rede.txt metodo

 - topologia-rede.txt: Matriz de adjacências indicando a topologia da rede que 
será simulada. 
 - metodo: shared|source

Após a chamada ao programa serão construidas as tabelas de roteamento de maneira
distribuída, não havendo uma entidade central que controle a troca de mensagens.
Caso metodo tenha seja shared, durante a montagem das tabelas de roteamento
também é determinada a árvore multicast compartilhada. O centro da árvore
foi determinado como sendo o promeiro roteador da topologia da rede.

Uma vez que as tabelas de roteamento estejam determinadas o programa passa a 
aceitar comandos vindos da entrada padrão no formato "<comando> <roteador> [<grupo>] "
ou "exit" e exibe as mensagens e o resultado do processamento conforme a especificação
do EP.

##Arquitetura
O EP foi feito baseado no EP3 e é composto de duas classes: Simulador e Roteador. 

A primeira é responsável por por atuar como interface em modo texto para a 
realizacão de consultas às tabelas de roteamento de cada um dos roteadores
definidos. Ainda, realiza as interconexões entre os roteadores segundo a ah
topologia da rede fornecida. Uma vez conectados os roteadores passam a funcionar
de maneira autonoma na geracao das tabelas de roteamento. Simulador também é 
responsável por imprimir o estado atual das árvores multicast conforme determinado
no EP.

A segunda representa um roteador físico. Aqui sao implementados os algoritmos de
roteamento baseados no estado do enlace (metodos _ee) e baseados em vetor
distancia (metodos _vd) úteis para a montagem e atualização das árvore de roteamento
multicast. Cada roteador é identificado com uma ID que inicia em 0.


##Protocolo
As trocas de mensagens entre os roteadores é feita através de chamada de métodos.
O funcionamento dos protocolos implementados segue:

###Considerações
O código supõe os enlaces são *simétricos* e o grafo da rede é *conexo*.

###Criação de um grupo multicast
O roteador fonte de uma transmissão multicast determina uma ID de grupo multicast
que nunca foi utilizada antes (Através de um contador incremental) e em seguida
produz uma mensagem de broadcast na rede informando do novo grupo criado. Com isso
todos os roteadores passam a poder mapear um ID de grupo para o ID do roteador fonte.

Caso o método de montagem das árvores multicast seja shared, caso o roteador
centro (No código _mc_rendezvous) seja diferente da fonte dos dados, este passa
a utilizar a rota determinada na montagem da árvore compartilhada para conectar-se
ao roteador fonte. Todos os roteadores no caminho entre o centro e a fonte também
conectam-se à árvore. Isso garante que quaisquer conexões posteriores de outros
roteadores ao grupo (Que tem como destino o centro da árvore por definição de
roteamento por árvore compartilhada) possam ser atendidas.


###Remoção de grupos multicast
Caso o roteador fonte (No caso source) ou o roteador centro (No caso shared)
detectem que não há mais receptores conectados ou outros roteadores que necessitem
dos dados do grupo multicast estes produzem uma mensagem broadcast para informar
que o grupo deixou de existir e é seguro desalocar todas as estruturas que 
representem o grupo em cada um dos roteadores.

###Entrada em grupos multicast
O algoritmo utilizado segue abaixo.

(Obs source: A partir do momento que o grupo é criado o roteador fonte já está na árvore.)

(Obs shared: Como explicado acima, a partir do momento que o centro passa a tomar
conhecimento da existência de um novo grupo multicast este se conecta
à fonte dos dados.)

Se o roteador não estiver na árvore:
	Envie uma requisição de entrada no grupo ao próximo roteador no menor 
	caminho *com relação ao atraso* até a fonte (source) ou o centro (rendezvous)
	da árvore compartilhada (shared).
	
	//O roteador está agora conectado ao grupo multicast
Fim se

Se a requisição veio de um usuário da própria rede (receptor):
	Incremente o número de usuários conectados no grupo
Fim se
	
Se a requisição veio de um roteador que necessita dos dados:
	Adicionar o roteador na lista de destinos a terem os pacotes
	multicast enviados
Fim se
	

###Saída de grupos multicast
O algoritmo utilizado segue abaixo:

Se a requisição veio de um usuário da própria rede (receptor):
	Decremente o número de usuários conectados no grupo
Fim se
	
Se a requisição veio de um roteador que não necessita mais dos dados:
	Remover o roteador da lista de destinos a terem os pacotes
	multicast enviados
Fim se

Se não há mais receptores ou roteadores que dependem dos dados do grupo multicast:
	Se o roteador for a fonte (shared) ou o centro (source):
		Envie uma mensagem broadcast informando do encerramento do grupo.
	Senão:
		Envie uma mensagem de desconexão do grupo ao próximo roteador no menor 
		caminho *com relação ao atraso* até a fonte (source) ou o centro (rendezvous)
		da árvore compartilhada (shared).
	Fim se
Fim se


## Testes
As topologias para os quais o programa foi testado encontram-se no diretório 
**testes**. Os testes incluem a topologia passada no enunciado, redes 
desconexas e com custos diferentes nos arcos de ida e volta.


## Documentação do código
A documentação do código produzido para o EP encontra-se diretamente no código
fonte.


